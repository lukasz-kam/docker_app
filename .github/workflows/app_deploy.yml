name: Docker to ECR

on:
  push:
    branches:
      - main
    paths:
    - 'app/**'
    - 'Dockerfile'

env:
  ECR_REPOSITORY: python-repo
  TF_VAR_aws_region: eu-central-1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TF_VAR_aws_region }}
          role-to-assume: arn:aws:iam::038462790533:role/TerraformRole
          role-session-name: GitHubActionsSession
          role-skip-session-tagging: true

      - name: Login to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Calculate content hash for Docker image tag
        id: calculate-hash
        run: |
          IMAGE_CONTENT_HASH=$(find Dockerfile app/ -type f -print0 | sort -z | xargs -0 sha1sum | sha1sum | awk '{print $1}')
          echo "Calculated image content hash: $IMAGE_CONTENT_HASH"
          echo "IMAGE_TAG=$IMAGE_CONTENT_HASH" >> $GITHUB_ENV

      - name: Lint Dockerfile using Hadolint
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Scan image for vulnerabilities using Trivy
        run: |
          TRIVY_REPORT_FILE="trivy-report-${{ github.run_id }}.json"
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --severity HIGH,CRITICAL --format json \
            --exit-code 1 \
            ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} > "$TRIVY_REPORT_FILE"
        continue-on-error: true

      - name: Upload Trivy Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report-${{ github.run_id }}
          path: trivy-report-${{ github.run_id }}.json
          retention-days: 2

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: app/task-definition.json
          container-name: main-cluster2-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: main-cluster2-service
          cluster: main-cluster2
          wait-for-service-stability: false